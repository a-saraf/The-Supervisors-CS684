node valet(s0,s1,s2,s3,s4: int) returns (v_left,v_right, direction: int)
(*s0,s1,s2,s3,s4 are the 5 white line sensors and 
ir0,ir1,ir2 are the 3 IR proximity sensors*)
var
ss0, ss1, ss2, ss3, ss4: bool;
thrs : int;
vel_out_right, vel_out_left: int;
pid_forward, pid_left: int;
kp1, kp2, kp3, kd1, kd2, kd3: int;

let
	thrs = 640;
	(*The thresholds correspond to 12.5 on the scale from -50 to 50*)
	kp1 = 1; kp2 = 4; kp3 = 3; kd1 = 2; kd2 = 2; kd3 = 2;	
	ss0 = if (s0 > thrs) then true else false;
	ss1 = if (s1 > thrs) then true else false;
	ss2 = if (s2 > thrs) then true else false;
	ss3 = if (s3 > thrs) then true else false;
	ss4 = if (s4 > thrs) then true else false;

	automaton
		state Init
			do
			v_left = 0;
			v_right = 0;
			direction = 1;
			until (ss0 or ss1 or ss2 or ss3 or ss4) then LineFollowing
			
		state LineFollowing
			do 
			automaton
				state Init
					do  
					direction = 1;
					v_left = 0;
					v_right = 0;
					until (ss2) then Fwd

				state Fwd
					do 
					v_left = vel_out_left;
					v_right = vel_out_right;
					direction = 1;
					until ((ss0 or ss1 or ss2 or ss3 or ss4) = false) then Back
			
				state Back
					do 
					direction = 0;
					v_left = 100;
					v_right = 100;
					until ((ss0 or ss1 or ss2 or ss3 or ss4)) then Fwd

			end;
		
	end;
	
	automaton
		state PID
			do 
			pid_forward = 0 -> (kp1*(s2) + kd1*(s2 - pre(s2))) / 12;
			pid_left = 0 -> (kp2*(s0 - s4) + kp3*(s1 - s3) + kd2*(s0 - pre(s0) - s4 + pre(s4)) + kd3*(s1 - pre(s1) - s3 + pre(s3))) / 16;
			vel_out_left = if (pid_forward - pid_left) > 0 and (pid_forward - pid_left) < 255 then (pid_forward - pid_left) else if (pid_forward - pid_left) <= 0 then 0 else 255;
			vel_out_right = if (pid_forward + pid_left) > 0 and (pid_forward + pid_left) < 255 then (pid_forward + pid_left) else if (pid_forward + pid_left) <= 0 then 0 else 255;
		 	
	end;
tel